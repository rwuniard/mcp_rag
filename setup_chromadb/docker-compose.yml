# This file defines your multi-container application.
# Use 'docker-compose up -d' to start and 'docker-compose down' to stop.

version: '3.8'

services:
  # 1. PostgreSQL Database Service
  postgres_db:
    image: postgres:15 # Using a specific version is good practice
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: vectoradmin
      POSTGRES_PASSWORD: password1234
      POSTGRES_DB: vdbms
    ports:
      # Expose port 5432 to the host machine
      - "5432:5432"
    volumes:
      # Persist database data on the host machine
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chroma_db_network

  # 2. ChromaDB Service
  chroma_db:
    # Using the official ChromaDB image - PINNING the version
    image: chromadb/chroma:1.0.20
    container_name: chroma_db
    restart: unless-stopped
    ports:
      # Expose port 8000 to the host machine
      - "8000:8000"
    environment:
      # ChromaDB needs to connect to the 'postgres_db' service.
      # We use the service name 'postgres_db' as the hostname.
      - DATABASE_URL=postgresql://vectoradmin:password1234@postgres_db:5432/vdbms
      # This flag is often needed for ChromaDB in Docker
      - IS_PERSISTENT=TRUE
    depends_on:
      # Wait for postgres_db to be healthy before starting
      - postgres_db
    networks:
      - chroma_db_network

  # 3. VectorAdmin Service
  vectoradmin:
    image: mintplexlabs/vectoradmin
    container_name: vectoradmin
    restart: unless-stopped
    ports:
      # Expose port 3001 to the host machine
      - "3001:3001"
    environment:
      - SERVER_PORT=3001
      - JWT_SECRET=your-random-string-here # CHANGE THIS
      - INNGEST_EVENT_KEY=background_workers
      - INNGEST_SIGNING_KEY=random-string-goes-here # CHANGE THIS
      - INNGEST_LANDING_PAGE=true
      # VectorAdmin also connects to the 'postgres_db' service
      - DATABASE_CONNECTION_STRING=postgresql://vectoradmin:password1234@postgres_db:5432/vdbms
    depends_on:
      - postgres_db
    networks:
      - chroma_db_network

# Define the volume for PostgreSQL data persistence
volumes:
  postgres_data:
    driver: local

# Define the shared network for inter-container communication
networks:
  chroma_db_network:
    driver: bridge
