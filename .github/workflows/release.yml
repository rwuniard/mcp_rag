name: Release

on:
  push:
    branches: [ main ]
  
  # Allow manual releases
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

# Permissions needed for release workflow
permissions:
  contents: write    # Required for creating releases and pushing tags
  packages: write    # Required for GitHub Container Registry
  issues: read       # Required for release notes generation

env:
  PYTHON_VERSION: "3.12"

jobs:
  # Validate main branch state
  validate:
    name: Validate Main Branch
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Run quick validation tests
      run: |
        echo "üß™ Running validation tests on main..."
        uv run python -m coverage run --source=src -m unittest discover tests -v
        uv run python -m coverage report --fail-under=70
        echo "‚úÖ Main branch validation complete"

  # Build and publish package
  build-and-publish:
    name: Build & Publish Package
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main'
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version detection

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --dev

    - name: Create release tag and determine version
      id: version
      run: |
        # Install the package to get version from setuptools_scm
        uv sync --dev
        
        # Get current version from setuptools_scm
        CURRENT_VERSION=$(uv run python -c "from setuptools_scm import get_version; print(get_version())")
        echo "Current version from setuptools_scm: $CURRENT_VERSION"
        
        # For automatic releases, use patch bump
        # For manual releases, use specified bump type  
        BUMP_TYPE="${{ github.event.inputs.version_bump || 'patch' }}"
        echo "Version bump type: $BUMP_TYPE"
        
        # Extract base version (remove any dev/local parts)
        BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/\.dev.*//g' | sed 's/+.*//g')
        echo "Base version: $BASE_VERSION"
        
        # Simple version bumping
        IFS='.' read -ra VERSION_PARTS <<< "$BASE_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        case $BUMP_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Create the Git tag (this will make setuptools_scm use this version)
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag "v$NEW_VERSION"
        git push origin "v$NEW_VERSION"
        
        echo "‚úÖ Created and pushed tag: v$NEW_VERSION"

    - name: Build package
      run: |
        echo "üì¶ Building package..."
        uv build
        ls -la dist/

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image to GitHub Container Registry
      run: |
        echo "üê≥ Building Docker image with secrets for GitHub Container Registry..."
        
        # Convert repository name to lowercase for ghcr.io
        REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        IMAGE_NAME="ghcr.io/${REPO_NAME}"
        
        echo "üìã Building image: ${IMAGE_NAME}"
        
        docker build \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg GIT_COMMIT=${{ github.sha }} \
          --build-arg GIT_BRANCH=${{ github.ref_name }} \
          --build-arg VERSION=${{ steps.version.outputs.version }} \
          --build-arg GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }} \
          --target production \
          -t ${IMAGE_NAME}:${{ steps.version.outputs.version }} \
          -t ${IMAGE_NAME}:latest \
          .
        
        echo "üì§ Pushing Docker images to GitHub Container Registry..."
        docker push ${IMAGE_NAME}:${{ steps.version.outputs.version }}
        docker push ${IMAGE_NAME}:latest
        
        echo "‚úÖ Docker images pushed successfully:"
        echo "   - ${IMAGE_NAME}:${{ steps.version.outputs.version }}"
        echo "   - ${IMAGE_NAME}:latest"

    - name: Publish to TestPyPI
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "üì§ Publishing to TestPyPI..."
        uv publish --token ${{ secrets.TEST_PYPI_API_TOKEN }} --publish-url https://test.pypi.org/legacy/
      continue-on-error: true

    - name: Publish to PyPI
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "üì§ Publishing to PyPI..."
        # uv publish --token ${{ secrets.PYPI_API_TOKEN }}
        echo "üöß PyPI publishing disabled - uncomment when ready"
      continue-on-error: true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-dist-${{ steps.version.outputs.version }}
        path: dist/
        retention-days: 90

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-dist-${{ needs.build-and-publish.outputs.version }}
        path: dist/

    - name: Generate release notes
      id: release_notes  
      run: |
        echo "üìù Generating simple release notes..."
        echo "## üöÄ Release v${{ needs.build-and-publish.outputs.version }}" > release-notes.md
        echo "" >> release-notes.md
        echo "Automated release with GitHub Container Registry integration." >> release-notes.md
        echo "" >> release-notes.md
        echo "### Changes" >> release-notes.md
        git log --oneline -5 --pretty=format:'- %s' >> release-notes.md
        echo "" >> release-notes.md
        echo "Built from commit: \`${{ github.sha }}\`" >> release-notes.md

    - name: Create GitHub Release
      run: |
        # Create release with GitHub CLI
        gh release create "v${{ needs.build-and-publish.outputs.version }}" \
          --title "Release v${{ needs.build-and-publish.outputs.version }}" \
          --notes-file release-notes.md \
          --repo ${{ github.repository }}
        
        echo "‚úÖ GitHub Release created: v${{ needs.build-and-publish.outputs.version }}"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Assets
      run: |
        # Upload all build artifacts to the release
        if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
          echo "üì¶ Uploading release assets..."
          gh release upload "v${{ needs.build-and-publish.outputs.version }}" dist/* \
            --repo ${{ github.repository }}
          echo "‚úÖ Release assets uploaded"
        else
          echo "‚ö†Ô∏è No dist/ directory or files found to upload"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Post-release notifications and updates
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [build-and-publish, create-release]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Post-release verification
      run: |
        echo "‚úÖ Release tag created: v${{ needs.build-and-publish.outputs.version }}"
        echo "‚úÖ Docker images published to GitHub Container Registry"
        echo "‚úÖ GitHub Release created with assets"

    - name: Release summary
      run: |
        echo "## üéâ Release Complete!"
        echo "Version: ${{ needs.build-and-publish.outputs.version }}"
        echo "Tag: v${{ needs.build-and-publish.outputs.version }}"
        echo "Build artifacts uploaded to GitHub release"
        echo ""
        echo "### Next Steps:"
        echo "- üìñ Update documentation if needed"
        echo "- üì¢ Announce release to users"
        echo "- üè∑Ô∏è  Update any deployment configurations"