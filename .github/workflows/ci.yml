name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"

jobs:
  # Job 1: Code Quality & Style
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync --dev

      - name: Code formatting check (black)
        run: uv run black --check --diff .
        continue-on-error: true

      - name: Import sorting check (isort)
        run: uv run isort --check-only --diff .
        continue-on-error: true

      - name: Lint with flake8
        run: |
          uv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          uv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: Type checking with mypy
        run: uv run mypy src/ --ignore-missing-imports --no-strict-optional
        continue-on-error: true

  # Job 2: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync --dev

      - name: Security linting with bandit
        run: uv run bandit -r src/ -ll
        continue-on-error: true

      - name: Check dependencies for known vulnerabilities
        run: uv run safety check --json
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 3: Testing & Coverage (Critical - Blocking)
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync --dev


      - name: Create test environment file
        run: |
          cat > .env << EOF
          GOOGLE_API_KEY=test_key_for_ci
          OPENAI_API_KEY=test_key_for_ci
          EOF

      - name: Run tests with coverage
        run: |
          uv run python -m coverage run --source=src -m unittest discover tests -v
          uv run python -m coverage report --show-missing
          uv run python -m coverage html
        
      - name: Check coverage threshold
        run: |
          # Extract coverage percentage
          COVERAGE=$(uv run python -m coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          echo "Current coverage: ${COVERAGE}%"
          
          # Set thresholds
          MIN_COVERAGE=70
          TARGET_COVERAGE=85
          
          # Check minimum threshold (blocking)
          if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "❌ Coverage ${COVERAGE}% is below minimum threshold of ${MIN_COVERAGE}%"
            exit 1
          fi
          
          # Check target threshold (warning)
          if (( $(echo "$COVERAGE < $TARGET_COVERAGE" | bc -l) )); then
            echo "⚠️ Coverage ${COVERAGE}% is below target threshold of ${TARGET_COVERAGE}%"
            echo "This is acceptable but improvement is encouraged."
          else
            echo "✅ Coverage ${COVERAGE}% meets target threshold of ${TARGET_COVERAGE}%"
          fi

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: htmlcov/

  # Job 4: Integration Testing
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync


      - name: Test CLI entry points
        run: |
          # Test main CLI
          uv run python main.py --help
          
          # Test RAG Store CLI (should show help without failing)
          uv run rag-store-cli --help || echo "RAG Store CLI help checked"
          
          # Test RAG Fetch CLI (should show help without failing)  
          uv run rag-fetch-cli --help || echo "RAG Fetch CLI help checked"

      - name: Test coverage tool
        run: |
          uv run python run_coverage.py --console-only

      - name: Test package installation
        run: |
          uv build
          ls -la dist/

  # Job 5: Multi-Python Version Testing (Non-blocking)
  test-matrix:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    continue-on-error: true
    strategy:
      matrix:
        python-version: ["3.11", "3.13"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync --dev


      - name: Create test environment file
        run: |
          cat > .env << EOF
          GOOGLE_API_KEY=test_key_for_ci
          OPENAI_API_KEY=test_key_for_ci
          EOF

      - name: Run tests
        run: uv run python -m unittest discover tests -v

  # Job 6: Release (Only on main branch)
  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [quality, security, test, integration]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: uv sync

      - name: Build package
        run: uv build

      - name: Create GitHub Release (if version changed)
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const toml = fs.readFileSync('pyproject.toml', 'utf8');
            const version = toml.match(/version = "(.+)"/)[1];
            
            try {
              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: `v${version}`,
                name: `Release v${version}`,
                body: 'Automated release from main branch',
                draft: false,
                prerelease: false
              });
              console.log(`Created release ${release.data.html_url}`);
            } catch (error) {
              if (error.status === 422) {
                console.log('Release already exists, skipping...');
              } else {
                throw error;
              }
            }

      - name: Publish to PyPI (Optional - configure secrets)
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          if [ -n "$PYPI_API_TOKEN" ]; then
            uv publish --token $PYPI_API_TOKEN
          else
            echo "PYPI_API_TOKEN not configured, skipping PyPI publish"
          fi